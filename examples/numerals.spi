Load nat
Load comp

numeral = (A : Type) -> (A -> A) -> A -> A

zero   = \(A : Type) (f : A -> A) (x : A) => x
succ   = \(n : numeral) (A : Type) (f : A -> A) (x : A) => n A f (f x)
one    = \(A : Type) (f : A -> A) (x : A) => f x
two    = \(A : Type) (f : A -> A) (x : A) => f (f x)
three  = \(A : Type) (f : A -> A) (x : A) => f (f x)

two' = 
  compDep₁
    numeral
    (λ (_ : numeral) => numeral)
    (λ (_ : numeral) (_ : numeral) => numeral)
    (λ (_ : numeral) (a : numeral) => succ a)
    (λ (a : numeral) => succ a)
    zero

two'' = 
  compSimp₁
    numeral
    numeral
    numeral
    succ
    succ
    zero

plus =
  \(m : numeral) (n : numeral) =>
     \(A : Type) (f : A -> A) (x : A) =>
        m A f (n A f x)

Eval plus
Eval plus three two Nat Succ Zero

Id₁   : (A : Type₁) → A → A → Type₁
Refl₁ : (A : Type₁) → (a : A) → Id₁ A a a
Predicate₁ : (A : Type₁) → (x, y : A) → Id₁ A x y → Type₁

Check Predicate₁ numeral two  two'  (Refl₁ numeral two)
Check Predicate₁ numeral two' two'' (Refl₁ numeral two')
